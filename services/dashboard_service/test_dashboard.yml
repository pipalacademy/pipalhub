---
name: Get events when response is empty
steps:
  - method: "GET"
    endpoint: "/events"
    expected_response: []
---
name: Create simple event
steps:
  - method: "POST"
    endpoint: "/events"
    json:
      type: test-event
      user: alice
      filename: module1-day1.ipynb
      path: "/home/alice/module1-day1.ipynb"
      timestamp: 2022-11-14T16:00:00.511Z
    expected_status: 201 CREATED
    expected_response:
      id: 1
      type: test-event
      user: alice
      filename: module1-day1.ipynb
      path: "/home/alice/module1-day1.ipynb"
      timestamp: "2022-11-14T16:00:00.511000+00:00"
---
name: Create events for multiple users and list them
steps:
  - method: POST
    endpoint: /events
    json:
      type: test-event
      user: alice
      filename: module1-day1.ipynb
      path: /home/alice/module1-day1.ipynb
      timestamp: 2022-11-14T16:00:00.511Z
    expected_status: 201 CREATED
  - method: POST
    endpoint: /events
    json:
      type: test-event
      user: bob
      filename: module1-day1.ipynb
      path: /home/bob/module1-day1.ipynb
      timestamp: "2022-11-15T16:00:00.511Z"
    expected_status: 201 CREATED
  - method: GET
    endpoint: /events
    expected_response:
      - id: 1
        type: test-event
        user: alice
        filename: module1-day1.ipynb
        path: /home/alice/module1-day1.ipynb
        timestamp: "2022-11-14T16:00:00.511000+00:00"
      - id: 2
        type: test-event
        user: bob
        filename: module1-day1.ipynb
        path: /home/bob/module1-day1.ipynb
        timestamp: "2022-11-15T16:00:00.511000+00:00"
---
name: Create multiple events for same user, where event should be overwritten
steps:
  - method: POST
    endpoint: /events
    json:
      type: test-event
      user: alice
      filename: module1-day1.ipynb
      path: /home/alice/module1-day1.ipynb
      timestamp: 2022-11-14T16:00:00.511Z
    expected_status: 201 CREATED
  - method: POST
    endpoint: /events
    json:
      type: test-event
      user: alice
      filename: module1-day1.ipynb
      path: /home/alice/module1-day1.ipynb
      timestamp: "2022-11-15T16:00:00.511Z"
    expected_status: 201 CREATED
  - method: GET
    endpoint: /events
    expected_response:
    - id: 1
      type: test-event
      user: alice
      filename: module1-day1.ipynb
      path: /home/alice/module1-day1.ipynb
      timestamp: "2022-11-15T16:00:00.511000+00:00"
---
name: Create event for user when timestamp should be defaulted to current time
steps:
  - method: POST
    endpoint: /events
    json:
      type: test-event
      user: alice
      filename: module1-day1.ipynb
      path: /home/alice/module1-day1.ipynb
    expected_status: 201 CREATED
---
name: Create user OK
patches:
  "dashboard_service.auth":
    user_for_token.return_value: '{"name": "tokenuser"}'
  "dashboard_service.does_user_exist":
    side_effect: "[False, True]"
  "dashboard_service.open":
    return_value: "StringIO()"
  "dashboard_service.check_call":
    return_value: "0"
steps:
  - method: POST
    endpoint: /users
    headers:
      Authorization: "token testtoken"
    json:
      username: testuser
      password: testpass
    expected_status: 201 CREATED
---
name: Create user when authorization fails
patches:
  "dashboard_service.auth":
    user_for_token.return_value: 'None'
  "dashboard_service.does_user_exist":
    side_effect: "[False, True]"
  "dashboard_service.open":
    return_value: "StringIO()"
  "dashboard_service.check_call":
    return_value: "0"
steps:
  - method: POST
    endpoint: /users
    headers:
      Authorization: "token testtoken"
    json:
      username: testuser
      password: testpass
    expected_status: 401 UNAUTHORIZED
---
name: Create user when content is not JSON
patches:
  "dashboard_service.auth":
    user_for_token.return_value: '{"name": "tokenuser"}'
  "dashboard_service.does_user_exist":
    side_effect: "[False, True]"
  "dashboard_service.open":
    return_value: "StringIO()"
  "dashboard_service.check_call":
    return_value: "0"
steps:
  - method: POST
    endpoint: /users
    headers:
      Authorization: "token testtoken"
    query_string:
      username: testuser
      password: testpass
    expected_status: 400 BAD REQUEST
---
name: Create user when username is invalid
patches:
  "dashboard_service.auth":
    user_for_token.return_value: '{"name": "tokenuser"}'
  "dashboard_service.does_user_exist":
    side_effect: "[False, True]"
  "dashboard_service.open":
    return_value: "StringIO()"
  "dashboard_service.check_call":
    return_value: "0"
steps:
  - method: POST
    endpoint: /users
    headers:
      Authorization: "token testtoken"
    json:
      username: 'testuser$'
      password: testpass
    expected_status: 400 BAD REQUEST
---
name: Create user when password is invalid
patches:
  "dashboard_service.auth":
    user_for_token.return_value: '{"name": "tokenuser"}'
  "dashboard_service.does_user_exist":
    side_effect: "[False, True]"
  "dashboard_service.open":
    return_value: "StringIO()"
  "dashboard_service.check_call":
    return_value: "0"
steps:
  - method: POST
    endpoint: /users
    headers:
      Authorization: "token testtoken"
    json:
      username: testuser
      password: 'testpass$'
    expected_status: 400 BAD REQUEST
---
name: Create user when user already exists
patches:
  "dashboard_service.auth":
    user_for_token.return_value: '{"name": "tokenuser"}'
  "dashboard_service.does_user_exist":
    side_effect: "[False, True]"
  "dashboard_service.open":
    return_value: "StringIO()"
  "dashboard_service.check_call":
    return_value: "0"
steps:
  - method: POST
    endpoint: /users
    headers:
      Authorization: "token testtoken"
    json:
      username: testuser
      password: testpass
    expected_status: 201 CREATED
  - method: POST
    endpoint: /users
    headers:
      Authorization: "token testtoken"
    json:
      username: testuser
      password: testpass
    expected_status: 400 BAD REQUEST
